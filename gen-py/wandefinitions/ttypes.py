#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class MessageType(object):
    PROPAGATE_DATA = 1
    PROPAGATE_STORE_DATA = 2
    STORE_DATA = 3

    _VALUES_TO_NAMES = {
        1: "PROPAGATE_DATA",
        2: "PROPAGATE_STORE_DATA",
        3: "STORE_DATA",
    }

    _NAMES_TO_VALUES = {
        "PROPAGATE_DATA": 1,
        "PROPAGATE_STORE_DATA": 2,
        "STORE_DATA": 3,
    }


class ResponseCode(object):
    SUCCESS = 0
    ERROR = 1

    _VALUES_TO_NAMES = {
        0: "SUCCESS",
        1: "ERROR",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 0,
        "ERROR": 1,
    }


class Response(object):
    """
    Attributes:
     - responseCode
     - receiverIdentity
     - msgType
    """


    def __init__(self, responseCode=1, receiverIdentity=None, msgType=2,):
        self.responseCode = responseCode
        self.receiverIdentity = receiverIdentity
        self.msgType = msgType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.responseCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.receiverIdentity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.msgType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Response')
        if self.responseCode is not None:
            oprot.writeFieldBegin('responseCode', TType.I32, 1)
            oprot.writeI32(self.responseCode)
            oprot.writeFieldEnd()
        if self.receiverIdentity is not None:
            oprot.writeFieldBegin('receiverIdentity', TType.STRING, 2)
            oprot.writeString(self.receiverIdentity.encode('utf-8') if sys.version_info[0] == 2 else self.receiverIdentity)
            oprot.writeFieldEnd()
        if self.msgType is not None:
            oprot.writeFieldBegin('msgType', TType.I32, 3)
            oprot.writeI32(self.msgType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.responseCode is None:
            raise TProtocolException(message='Required field responseCode is unset!')
        if self.receiverIdentity is None:
            raise TProtocolException(message='Required field receiverIdentity is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Response)
Response.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'responseCode', None, 1, ),  # 1
    (2, TType.STRING, 'receiverIdentity', 'UTF8', None, ),  # 2
    (3, TType.I32, 'msgType', None, 2, ),  # 3
)
fix_spec(all_structs)
del all_structs
